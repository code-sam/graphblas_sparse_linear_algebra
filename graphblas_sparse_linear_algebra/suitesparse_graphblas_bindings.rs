/* automatically generated by rust-bindgen 0.58.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const _COMPLEX_H: u32 = 1;
pub const GxB_IMPLEMENTATION_NAME: &'static [u8; 22usize] = b"SuiteSparse:GraphBLAS\0";
pub const GxB_IMPLEMENTATION_DATE: &'static [u8; 13usize] = b"Jan 19, 2021\0";
pub const GxB_IMPLEMENTATION_MAJOR: u32 = 4;
pub const GxB_IMPLEMENTATION_MINOR: u32 = 0;
pub const GxB_IMPLEMENTATION_SUB: u32 = 3;
pub const GxB_SPEC_DATE: &'static [u8; 14usize] = b"Sept 25, 2019\0";
pub const GxB_SPEC_MAJOR: u32 = 1;
pub const GxB_SPEC_MINOR: u32 = 3;
pub const GxB_SPEC_SUB: u32 = 0;
pub const GRB_VERSION: u32 = 1;
pub const GRB_SUBVERSION: u32 = 3;
pub const GxB_NTHREADS: u32 = 5;
pub const GxB_CHUNK: u32 = 7;
pub const GxB_GPU_CONTROL: u32 = 21;
pub const GxB_GPU_CHUNK: u32 = 22;
pub const GxB_HYPER: u32 = 0;
pub const GxB_HYPERSPARSE: u32 = 1;
pub const GxB_SPARSE: u32 = 2;
pub const GxB_BITMAP: u32 = 4;
pub const GxB_FULL: u32 = 8;
pub const GxB_NBITMAP_SWITCH: u32 = 8;
pub const GxB_ANY_SPARSITY: u32 = 15;
pub const GxB_AUTO_SPARSITY: u32 = 15;
pub const GxB_BEGIN: u32 = 0;
pub const GxB_END: u32 = 1;
pub const GxB_INC: u32 = 2;
pub type size_t = ::std::os::raw::c_ulong;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(
        arg1: *mut _IO_FILE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __s: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: ::std::os::raw::c_uint = 0;
pub const FP_INFINITE: ::std::os::raw::c_uint = 1;
pub const FP_ZERO: ::std::os::raw::c_uint = 2;
pub const FP_SUBNORMAL: ::std::os::raw::c_uint = 3;
pub const FP_NORMAL: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn cacos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexp(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cexp(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clog(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __clog(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpow(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cpow(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrt(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csqrt(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cabs(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __cabs(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn carg(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __carg(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn conj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __conj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cproj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cproj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cimag(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __cimag(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn creal(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __creal(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cacosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cacosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __casinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __catanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ccosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ctanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cacoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __casinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __catanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ccoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ctanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cexpf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cexpf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn clogf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __clogf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cpowf(__x: __BindgenComplex<f32>, __y: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cpowf(__x: __BindgenComplex<f32>, __y: __BindgenComplex<f32>)
        -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csqrtf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csqrtf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cabsf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cabsf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cargf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cargf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn conjf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __conjf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cprojf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cprojf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cimagf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cimagf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn crealf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __crealf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cacosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexpl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cexpl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clogl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __clogl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpowl(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cpowl(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>)
        -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrtl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csqrtl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cabsl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cabsl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn cargl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cargl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn conjl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __conjl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cprojl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cprojl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cimagl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cimagl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn creall(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __creall(__z: __BindgenComplex<f64>) -> u128;
}
pub type GxB_FC32_t = __BindgenComplex<f32>;
pub type GxB_FC64_t = __BindgenComplex<f64>;
pub type GrB_Index = u64;
pub const GrB_Info_GrB_SUCCESS: GrB_Info = 0;
pub const GrB_Info_GrB_NO_VALUE: GrB_Info = 1;
pub const GrB_Info_GrB_UNINITIALIZED_OBJECT: GrB_Info = 2;
pub const GrB_Info_GrB_INVALID_OBJECT: GrB_Info = 3;
pub const GrB_Info_GrB_NULL_POINTER: GrB_Info = 4;
pub const GrB_Info_GrB_INVALID_VALUE: GrB_Info = 5;
pub const GrB_Info_GrB_INVALID_INDEX: GrB_Info = 6;
pub const GrB_Info_GrB_DOMAIN_MISMATCH: GrB_Info = 7;
pub const GrB_Info_GrB_DIMENSION_MISMATCH: GrB_Info = 8;
pub const GrB_Info_GrB_OUTPUT_NOT_EMPTY: GrB_Info = 9;
pub const GrB_Info_GrB_OUT_OF_MEMORY: GrB_Info = 10;
pub const GrB_Info_GrB_INSUFFICIENT_SPACE: GrB_Info = 11;
pub const GrB_Info_GrB_INDEX_OUT_OF_BOUNDS: GrB_Info = 12;
pub const GrB_Info_GrB_PANIC: GrB_Info = 13;
pub type GrB_Info = ::std::os::raw::c_uint;
pub const GrB_Mode_GrB_NONBLOCKING: GrB_Mode = 0;
pub const GrB_Mode_GrB_BLOCKING: GrB_Mode = 1;
pub type GrB_Mode = ::std::os::raw::c_uint;
extern "C" {
    pub fn GrB_init(mode: GrB_Mode) -> GrB_Info;
}
extern "C" {
    pub fn GxB_init(
        mode: GrB_Mode,
        user_malloc_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: size_t) -> *mut ::std::os::raw::c_void,
        >,
        user_calloc_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: size_t, arg2: size_t) -> *mut ::std::os::raw::c_void,
        >,
        user_realloc_function: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: size_t,
            ) -> *mut ::std::os::raw::c_void,
        >,
        user_free_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        user_malloc_is_thread_safe: bool,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_cuda_init(mode: GrB_Mode) -> GrB_Info;
}
extern "C" {
    pub fn GrB_finalize() -> GrB_Info;
}
extern "C" {
    pub fn GrB_getVersion(
        version: *mut ::std::os::raw::c_uint,
        subversion: *mut ::std::os::raw::c_uint,
    ) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Type_opaque {
    _unused: [u8; 0],
}
pub type GrB_Type = *mut GB_Type_opaque;
extern "C" {
    pub static mut GrB_BOOL: GrB_Type;
}
extern "C" {
    pub static mut GrB_INT8: GrB_Type;
}
extern "C" {
    pub static mut GrB_INT16: GrB_Type;
}
extern "C" {
    pub static mut GrB_INT32: GrB_Type;
}
extern "C" {
    pub static mut GrB_INT64: GrB_Type;
}
extern "C" {
    pub static mut GrB_UINT8: GrB_Type;
}
extern "C" {
    pub static mut GrB_UINT16: GrB_Type;
}
extern "C" {
    pub static mut GrB_UINT32: GrB_Type;
}
extern "C" {
    pub static mut GrB_UINT64: GrB_Type;
}
extern "C" {
    pub static mut GrB_FP32: GrB_Type;
}
extern "C" {
    pub static mut GrB_FP64: GrB_Type;
}
extern "C" {
    pub static mut GxB_FC32: GrB_Type;
}
extern "C" {
    pub static mut GxB_FC64: GrB_Type;
}
extern "C" {
    pub fn GrB_Type_new(type_: *mut GrB_Type, sizeof_ctype: size_t) -> GrB_Info;
}
extern "C" {
    pub fn GB_Type_new(
        type_: *mut GrB_Type,
        sizeof_ctype: size_t,
        name: *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Type_size(size: *mut size_t, type_: GrB_Type) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_free(type_: *mut GrB_Type) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_UnaryOp_opaque {
    _unused: [u8; 0],
}
pub type GrB_UnaryOp = *mut GB_UnaryOp_opaque;
extern "C" {
    pub static mut GrB_IDENTITY_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_IDENTITY_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_AINV_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_MINV_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LNOT_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_IDENTITY_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_AINV_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_MINV_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_IDENTITY_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_AINV_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_MINV_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_BNOT_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_ABS_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ONE_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GrB_LNOT: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_BOOL: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_INT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_INT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_UINT8: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_UINT16: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_UINT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_UINT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SQRT_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG2_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SQRT_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG2_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SQRT_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG2_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SQRT_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG2_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIN_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COS_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TAN_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIN_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COS_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TAN_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIN_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COS_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TAN_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIN_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COS_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TAN_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOS_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASIN_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATAN_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOS_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASIN_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATAN_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOS_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASIN_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATAN_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOS_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASIN_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATAN_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SINH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COSH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TANH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SINH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COSH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TANH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SINH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COSH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TANH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SINH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_COSH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TANH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOSH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASINH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATANH_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIGNUM_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOSH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASINH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATANH_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIGNUM_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOSH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASINH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATANH_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIGNUM_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ACOSH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ASINH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ATANH_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_SIGNUM_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CEIL_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FLOOR_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ROUND_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TRUNC_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CEIL_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FLOOR_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ROUND_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TRUNC_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CEIL_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FLOOR_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ROUND_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TRUNC_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CEIL_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FLOOR_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ROUND_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TRUNC_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP2_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXPM1_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG10_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG1P_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP2_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXPM1_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG10_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG1P_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP2_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXPM1_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG10_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG1P_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXP2_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_EXPM1_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG10_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LOG1P_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LGAMMA_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TGAMMA_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ERF_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ERFC_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_LGAMMA_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_TGAMMA_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ERF_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ERFC_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FREXPX_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FREXPE_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FREXPX_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_FREXPE_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CONJ_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CONJ_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CREAL_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CIMAG_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CARG_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CREAL_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CIMAG_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_CARG_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ABS_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISINF_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISINF_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISINF_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISINF_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISNAN_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISNAN_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISNAN_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISNAN_FC64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISFINITE_FP32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISFINITE_FP64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISFINITE_FC32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_ISFINITE_FC64: GrB_UnaryOp;
}
pub type GxB_unary_function = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void),
>;
extern "C" {
    pub fn GrB_UnaryOp_new(
        unaryop: *mut GrB_UnaryOp,
        function: GxB_unary_function,
        ztype: GrB_Type,
        xtype: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GB_UnaryOp_new(
        unaryop: *mut GrB_UnaryOp,
        function: GxB_unary_function,
        ztype: GrB_Type,
        xtype: GrB_Type,
        name: *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_UnaryOp_ztype(ztype: *mut GrB_Type, unaryop: GrB_UnaryOp) -> GrB_Info;
}
extern "C" {
    pub fn GxB_UnaryOp_xtype(xtype: *mut GrB_Type, unaryop: GrB_UnaryOp) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_free(unaryop: *mut GrB_UnaryOp) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_BinaryOp_opaque {
    _unused: [u8; 0],
}
pub type GrB_BinaryOp = *mut GB_BinaryOp_opaque;
extern "C" {
    pub static mut GrB_FIRST_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_FIRST_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_SECOND_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRST_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECOND_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRST_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECOND_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POW_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_PLUS_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MINUS_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_TIMES_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_DIV_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PLUS_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_MINUS_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_TIMES_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_DIV_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PLUS_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_MINUS_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_TIMES_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_DIV_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RMINUS_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_RDIV_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_PAIR_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ANY_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISEQ_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISNE_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGT_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLT_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISGE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ISLE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MIN_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_MAX_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LOR_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LAND_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LXOR_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LOR: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LAND: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LXOR: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LXNOR: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ATAN2_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_HYPOT_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FMOD_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_REMAINDER_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_ATAN2_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_HYPOT_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FMOD_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_REMAINDER_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LDEXP_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_COPYSIGN_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_LDEXP_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_COPYSIGN_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BOR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BAND_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXOR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_BXNOR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BGET_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSET_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BCLR_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_BSHIFT_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_EQ_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_NE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GT_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LT_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_EQ_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_NE_FC32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_EQ_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_NE_FC64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_BOOL: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_INT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_INT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_UINT8: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_UINT16: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_UINT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_UINT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_GE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GrB_LE_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_CMPLX_FP32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_CMPLX_FP64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTI_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTI_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTI1_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTI1_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTJ_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTJ_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTJ1_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_FIRSTJ1_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDI_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDI_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDI1_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDI1_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDJ_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDJ_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDJ1_INT32: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_SECONDJ1_INT64: GrB_BinaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONI_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONI_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONI1_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONI1_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONJ_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONJ_INT64: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONJ1_INT32: GrB_UnaryOp;
}
extern "C" {
    pub static mut GxB_POSITIONJ1_INT64: GrB_UnaryOp;
}
pub type GxB_binary_function = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn GrB_BinaryOp_new(
        binaryop: *mut GrB_BinaryOp,
        function: GxB_binary_function,
        ztype: GrB_Type,
        xtype: GrB_Type,
        ytype: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GB_BinaryOp_new(
        binaryop: *mut GrB_BinaryOp,
        function: GxB_binary_function,
        ztype: GrB_Type,
        xtype: GrB_Type,
        ytype: GrB_Type,
        name: *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_ztype(ztype: *mut GrB_Type, binaryop: GrB_BinaryOp) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_xtype(xtype: *mut GrB_Type, binaryop: GrB_BinaryOp) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_ytype(ytype: *mut GrB_Type, binaryop: GrB_BinaryOp) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_free(binaryop: *mut GrB_BinaryOp) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_SelectOp_opaque {
    _unused: [u8; 0],
}
pub type GxB_SelectOp = *mut GB_SelectOp_opaque;
extern "C" {
    pub static mut GxB_TRIL: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_TRIU: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_DIAG: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_OFFDIAG: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_NONZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_EQ_ZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_GT_ZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_GE_ZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_LT_ZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_LE_ZERO: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_NE_THUNK: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_EQ_THUNK: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_GT_THUNK: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_GE_THUNK: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_LT_THUNK: GxB_SelectOp;
}
extern "C" {
    pub static mut GxB_LE_THUNK: GxB_SelectOp;
}
pub type GxB_select_function = ::std::option::Option<
    unsafe extern "C" fn(
        i: GrB_Index,
        j: GrB_Index,
        x: *const ::std::os::raw::c_void,
        thunk: *const ::std::os::raw::c_void,
    ) -> bool,
>;
extern "C" {
    pub fn GxB_SelectOp_new(
        selectop: *mut GxB_SelectOp,
        function: GxB_select_function,
        xtype: GrB_Type,
        ttype: GrB_Type,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GB_SelectOp_new(
        selectop: *mut GxB_SelectOp,
        function: GxB_select_function,
        xtype: GrB_Type,
        ttype: GrB_Type,
        name: *const ::std::os::raw::c_char,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_SelectOp_xtype(xtype: *mut GrB_Type, selectop: GxB_SelectOp) -> GrB_Info;
}
extern "C" {
    pub fn GxB_SelectOp_ttype(ttype: *mut GrB_Type, selectop: GxB_SelectOp) -> GrB_Info;
}
extern "C" {
    pub fn GxB_SelectOp_free(selectop: *mut GxB_SelectOp) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Monoid_opaque {
    _unused: [u8; 0],
}
pub type GrB_Monoid = *mut GB_Monoid_opaque;
extern "C" {
    pub fn GrB_Monoid_new_BOOL(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: bool,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_INT8(monoid: *mut GrB_Monoid, op: GrB_BinaryOp, identity: i8)
        -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_UINT8(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_INT16(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_UINT16(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_INT32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_UINT32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_INT64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_UINT64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_FP32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: f32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_FP64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_new_FC32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: GxB_FC32_t,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_new_FC64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: GxB_FC64_t,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_new_UDT(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: *mut ::std::os::raw::c_void,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_BOOL(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: bool,
        terminal: bool,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_INT8(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i8,
        terminal: i8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_UINT8(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u8,
        terminal: u8,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_INT16(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i16,
        terminal: i16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_UINT16(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u16,
        terminal: u16,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_INT32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i32,
        terminal: i32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_UINT32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u32,
        terminal: u32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_INT64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: i64,
        terminal: i64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_UINT64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: u64,
        terminal: u64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_FP32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: f32,
        terminal: f32,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_FP64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: f64,
        terminal: f64,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_FC32(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: GxB_FC32_t,
        terminal: GxB_FC32_t,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_FC64(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: GxB_FC64_t,
        terminal: GxB_FC64_t,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal_new_UDT(
        monoid: *mut GrB_Monoid,
        op: GrB_BinaryOp,
        identity: *mut ::std::os::raw::c_void,
        terminal: *mut ::std::os::raw::c_void,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_operator(op: *mut GrB_BinaryOp, monoid: GrB_Monoid) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_identity(
        identity: *mut ::std::os::raw::c_void,
        monoid: GrB_Monoid,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_terminal(
        has_terminal: *mut bool,
        terminal: *mut ::std::os::raw::c_void,
        monoid: GrB_Monoid,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_free(monoid: *mut GrB_Monoid) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Semiring_opaque {
    _unused: [u8; 0],
}
pub type GrB_Semiring = *mut GB_Semiring_opaque;
extern "C" {
    pub fn GrB_Semiring_new(
        semiring: *mut GrB_Semiring,
        add: GrB_Monoid,
        multiply: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Semiring_add(add: *mut GrB_Monoid, semiring: GrB_Semiring) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Semiring_multiply(multiply: *mut GrB_BinaryOp, semiring: GrB_Semiring) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_free(semiring: *mut GrB_Semiring) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Scalar_opaque {
    _unused: [u8; 0],
}
pub type GxB_Scalar = *mut GB_Scalar_opaque;
extern "C" {
    pub fn GxB_Scalar_new(s: *mut GxB_Scalar, type_: GrB_Type) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_dup(s: *mut GxB_Scalar, t: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_clear(s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_nvals(nvals: *mut GrB_Index, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_type(type_: *mut GrB_Type, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_free(s: *mut GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_BOOL(s: GxB_Scalar, x: bool) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_INT8(s: GxB_Scalar, x: i8) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_UINT8(s: GxB_Scalar, x: u8) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_INT16(s: GxB_Scalar, x: i16) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_UINT16(s: GxB_Scalar, x: u16) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_INT32(s: GxB_Scalar, x: i32) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_UINT32(s: GxB_Scalar, x: u32) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_INT64(s: GxB_Scalar, x: i64) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_UINT64(s: GxB_Scalar, x: u64) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_FP32(s: GxB_Scalar, x: f32) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_FP64(s: GxB_Scalar, x: f64) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_FC32(s: GxB_Scalar, x: GxB_FC32_t) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_FC64(s: GxB_Scalar, x: GxB_FC64_t) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_setElement_UDT(s: GxB_Scalar, x: *mut ::std::os::raw::c_void) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_BOOL(x: *mut bool, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_INT8(x: *mut i8, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_UINT8(x: *mut u8, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_INT16(x: *mut i16, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_UINT16(x: *mut u16, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_INT32(x: *mut i32, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_UINT32(x: *mut u32, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_INT64(x: *mut i64, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_UINT64(x: *mut u64, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_FP32(x: *mut f32, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_FP64(x: *mut f64, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_FC32(x: *mut GxB_FC32_t, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_FC64(x: *mut GxB_FC64_t, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_extractElement_UDT(x: *mut ::std::os::raw::c_void, s: GxB_Scalar)
        -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Vector_opaque {
    _unused: [u8; 0],
}
pub type GrB_Vector = *mut GB_Vector_opaque;
extern "C" {
    pub fn GrB_Vector_new(v: *mut GrB_Vector, type_: GrB_Type, n: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_dup(w: *mut GrB_Vector, u: GrB_Vector) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_clear(v: GrB_Vector) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_size(n: *mut GrB_Index, v: GrB_Vector) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_nvals(nvals: *mut GrB_Index, v: GrB_Vector) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_type(type_: *mut GrB_Type, v: GrB_Vector) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_free(v: *mut GrB_Vector) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_BOOL(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const bool,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_INT8(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const i8,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_UINT8(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const u8,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_INT16(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const i16,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_UINT16(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const u16,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_INT32(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const i32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_UINT32(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const u32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_INT64(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const i64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_UINT64(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const u64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_FP32(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const f32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_FP64(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const f64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_build_FC32(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const GxB_FC32_t,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_build_FC64(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const GxB_FC64_t,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_build_UDT(
        w: GrB_Vector,
        I: *const GrB_Index,
        X: *const ::std::os::raw::c_void,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_BOOL(w: GrB_Vector, x: bool, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_INT8(w: GrB_Vector, x: i8, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_UINT8(w: GrB_Vector, x: u8, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_INT16(w: GrB_Vector, x: i16, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_UINT16(w: GrB_Vector, x: u16, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_INT32(w: GrB_Vector, x: i32, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_UINT32(w: GrB_Vector, x: u32, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_INT64(w: GrB_Vector, x: i64, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_UINT64(w: GrB_Vector, x: u64, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_FP32(w: GrB_Vector, x: f32, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_FP64(w: GrB_Vector, x: f64, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_setElement_FC32(w: GrB_Vector, x: GxB_FC32_t, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_setElement_FC64(w: GrB_Vector, x: GxB_FC64_t, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_setElement_UDT(
        w: GrB_Vector,
        x: *mut ::std::os::raw::c_void,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_BOOL(x: *mut bool, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_INT8(x: *mut i8, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_UINT8(x: *mut u8, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_INT16(x: *mut i16, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_UINT16(x: *mut u16, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_INT32(x: *mut i32, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_UINT32(x: *mut u32, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_INT64(x: *mut i64, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_UINT64(x: *mut u64, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_FP32(x: *mut f32, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_FP64(x: *mut f64, v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_extractElement_FC32(
        x: *mut GxB_FC32_t,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_extractElement_FC64(
        x: *mut GxB_FC64_t,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractElement_UDT(
        x: *mut ::std::os::raw::c_void,
        v: GrB_Vector,
        i: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_removeElement(v: GrB_Vector, i: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_BOOL(
        I: *mut GrB_Index,
        X: *mut bool,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_INT8(
        I: *mut GrB_Index,
        X: *mut i8,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_UINT8(
        I: *mut GrB_Index,
        X: *mut u8,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_INT16(
        I: *mut GrB_Index,
        X: *mut i16,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_UINT16(
        I: *mut GrB_Index,
        X: *mut u16,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_INT32(
        I: *mut GrB_Index,
        X: *mut i32,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_UINT32(
        I: *mut GrB_Index,
        X: *mut u32,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_INT64(
        I: *mut GrB_Index,
        X: *mut i64,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_UINT64(
        I: *mut GrB_Index,
        X: *mut u64,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_FP32(
        I: *mut GrB_Index,
        X: *mut f32,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_FP64(
        I: *mut GrB_Index,
        X: *mut f64,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_extractTuples_FC32(
        I: *mut GrB_Index,
        X: *mut GxB_FC32_t,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_extractTuples_FC64(
        I: *mut GrB_Index,
        X: *mut GxB_FC64_t,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_extractTuples_UDT(
        I: *mut GrB_Index,
        X: *mut ::std::os::raw::c_void,
        nvals: *mut GrB_Index,
        v: GrB_Vector,
    ) -> GrB_Info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Matrix_opaque {
    _unused: [u8; 0],
}
pub type GrB_Matrix = *mut GB_Matrix_opaque;
extern "C" {
    pub fn GrB_Matrix_new(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_dup(C: *mut GrB_Matrix, A: GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_clear(A: GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_nrows(nrows: *mut GrB_Index, A: GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_ncols(ncols: *mut GrB_Index, A: GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_nvals(nvals: *mut GrB_Index, A: GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_type(type_: *mut GrB_Type, A: GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_free(A: *mut GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_BOOL(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const bool,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_INT8(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const i8,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_UINT8(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const u8,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_INT16(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const i16,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_UINT16(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const u16,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_INT32(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const i32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_UINT32(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const u32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_INT64(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const i64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_UINT64(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const u64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_FP32(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const f32,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_FP64(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const f64,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_build_FC32(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const GxB_FC32_t,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_build_FC64(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const GxB_FC64_t,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_build_UDT(
        C: GrB_Matrix,
        I: *const GrB_Index,
        J: *const GrB_Index,
        X: *const ::std::os::raw::c_void,
        nvals: GrB_Index,
        dup: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_BOOL(
        C: GrB_Matrix,
        x: bool,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_INT8(C: GrB_Matrix, x: i8, i: GrB_Index, j: GrB_Index)
        -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_UINT8(
        C: GrB_Matrix,
        x: u8,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_INT16(
        C: GrB_Matrix,
        x: i16,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_UINT16(
        C: GrB_Matrix,
        x: u16,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_INT32(
        C: GrB_Matrix,
        x: i32,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_UINT32(
        C: GrB_Matrix,
        x: u32,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_INT64(
        C: GrB_Matrix,
        x: i64,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_UINT64(
        C: GrB_Matrix,
        x: u64,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_FP32(
        C: GrB_Matrix,
        x: f32,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_FP64(
        C: GrB_Matrix,
        x: f64,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_setElement_FC32(
        C: GrB_Matrix,
        x: GxB_FC32_t,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_setElement_FC64(
        C: GrB_Matrix,
        x: GxB_FC64_t,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_setElement_UDT(
        C: GrB_Matrix,
        x: *mut ::std::os::raw::c_void,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_BOOL(
        x: *mut bool,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_INT8(
        x: *mut i8,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_UINT8(
        x: *mut u8,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_INT16(
        x: *mut i16,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_UINT16(
        x: *mut u16,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_INT32(
        x: *mut i32,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_UINT32(
        x: *mut u32,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_INT64(
        x: *mut i64,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_UINT64(
        x: *mut u64,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_FP32(
        x: *mut f32,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_FP64(
        x: *mut f64,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_extractElement_FC32(
        x: *mut GxB_FC32_t,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_extractElement_FC64(
        x: *mut GxB_FC64_t,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractElement_UDT(
        x: *mut ::std::os::raw::c_void,
        A: GrB_Matrix,
        i: GrB_Index,
        j: GrB_Index,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_removeElement(C: GrB_Matrix, i: GrB_Index, j: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_BOOL(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut bool,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_INT8(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut i8,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_UINT8(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut u8,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_INT16(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut i16,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_UINT16(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut u16,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_INT32(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut i32,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_UINT32(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut u32,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_INT64(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut i64,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_UINT64(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut u64,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_FP32(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut f32,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_FP64(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut f64,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_extractTuples_FC32(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut GxB_FC32_t,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_extractTuples_FC64(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut GxB_FC64_t,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extractTuples_UDT(
        I: *mut GrB_Index,
        J: *mut GrB_Index,
        X: *mut ::std::os::raw::c_void,
        nvals: *mut GrB_Index,
        A: GrB_Matrix,
    ) -> GrB_Info;
}
pub const GrB_Desc_Field_GrB_OUTP: GrB_Desc_Field = 0;
pub const GrB_Desc_Field_GrB_MASK: GrB_Desc_Field = 1;
pub const GrB_Desc_Field_GrB_INP0: GrB_Desc_Field = 2;
pub const GrB_Desc_Field_GrB_INP1: GrB_Desc_Field = 3;
pub const GrB_Desc_Field_GxB_DESCRIPTOR_NTHREADS: GrB_Desc_Field = 5;
pub const GrB_Desc_Field_GxB_DESCRIPTOR_CHUNK: GrB_Desc_Field = 7;
pub const GrB_Desc_Field_GxB_DESCRIPTOR_GPU_CONTROL: GrB_Desc_Field = 21;
pub const GrB_Desc_Field_GxB_DESCRIPTOR_GPU_CHUNK: GrB_Desc_Field = 22;
pub const GrB_Desc_Field_GxB_AxB_METHOD: GrB_Desc_Field = 1000;
pub const GrB_Desc_Field_GxB_SORT: GrB_Desc_Field = 35;
pub type GrB_Desc_Field = ::std::os::raw::c_uint;
pub const GrB_Desc_Value_GxB_DEFAULT: GrB_Desc_Value = 0;
pub const GrB_Desc_Value_GrB_REPLACE: GrB_Desc_Value = 1;
pub const GrB_Desc_Value_GrB_COMP: GrB_Desc_Value = 2;
pub const GrB_Desc_Value_GrB_SCMP: GrB_Desc_Value = 2;
pub const GrB_Desc_Value_GrB_STRUCTURE: GrB_Desc_Value = 4;
pub const GrB_Desc_Value_GrB_TRAN: GrB_Desc_Value = 3;
pub const GrB_Desc_Value_GxB_GPU_ALWAYS: GrB_Desc_Value = 2001;
pub const GrB_Desc_Value_GxB_GPU_NEVER: GrB_Desc_Value = 2002;
pub const GrB_Desc_Value_GxB_AxB_GUSTAVSON: GrB_Desc_Value = 1001;
pub const GrB_Desc_Value_GxB_AxB_DOT: GrB_Desc_Value = 1003;
pub const GrB_Desc_Value_GxB_AxB_HASH: GrB_Desc_Value = 1004;
pub const GrB_Desc_Value_GxB_AxB_SAXPY: GrB_Desc_Value = 1005;
pub type GrB_Desc_Value = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GB_Descriptor_opaque {
    _unused: [u8; 0],
}
pub type GrB_Descriptor = *mut GB_Descriptor_opaque;
extern "C" {
    pub fn GrB_Descriptor_new(descriptor: *mut GrB_Descriptor) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_set(
        desc: GrB_Descriptor,
        field: GrB_Desc_Field,
        val: GrB_Desc_Value,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Descriptor_get(
        val: *mut GrB_Desc_Value,
        desc: GrB_Descriptor,
        field: GrB_Desc_Field,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Desc_set(desc: GrB_Descriptor, field: GrB_Desc_Field, ...) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Desc_get(desc: GrB_Descriptor, field: GrB_Desc_Field, ...) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_free(descriptor: *mut GrB_Descriptor) -> GrB_Info;
}
extern "C" {
    pub static mut GrB_DESC_T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_T0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_T0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_C: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_CT1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_CT0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_CT0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_S: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_ST1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_ST0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_ST0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_SC: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_SCT1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_SCT0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_SCT0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_R: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RT1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RT0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RT0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RC: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RCT1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RCT0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RCT0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RS: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RST1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RST0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RST0T1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RSC: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RSCT1: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RSCT0: GrB_Descriptor;
}
extern "C" {
    pub static mut GrB_DESC_RSCT0T1: GrB_Descriptor;
}
pub const GxB_Option_Field_GxB_HYPER_SWITCH: GxB_Option_Field = 0;
pub const GxB_Option_Field_GxB_BITMAP_SWITCH: GxB_Option_Field = 34;
pub const GxB_Option_Field_GxB_FORMAT: GxB_Option_Field = 1;
pub const GxB_Option_Field_GxB_MODE: GxB_Option_Field = 2;
pub const GxB_Option_Field_GxB_LIBRARY_NAME: GxB_Option_Field = 8;
pub const GxB_Option_Field_GxB_LIBRARY_VERSION: GxB_Option_Field = 9;
pub const GxB_Option_Field_GxB_LIBRARY_DATE: GxB_Option_Field = 10;
pub const GxB_Option_Field_GxB_LIBRARY_ABOUT: GxB_Option_Field = 11;
pub const GxB_Option_Field_GxB_LIBRARY_URL: GxB_Option_Field = 12;
pub const GxB_Option_Field_GxB_LIBRARY_LICENSE: GxB_Option_Field = 13;
pub const GxB_Option_Field_GxB_LIBRARY_COMPILE_DATE: GxB_Option_Field = 14;
pub const GxB_Option_Field_GxB_LIBRARY_COMPILE_TIME: GxB_Option_Field = 15;
pub const GxB_Option_Field_GxB_API_VERSION: GxB_Option_Field = 16;
pub const GxB_Option_Field_GxB_API_DATE: GxB_Option_Field = 17;
pub const GxB_Option_Field_GxB_API_ABOUT: GxB_Option_Field = 18;
pub const GxB_Option_Field_GxB_API_URL: GxB_Option_Field = 19;
pub const GxB_Option_Field_GxB_GLOBAL_NTHREADS: GxB_Option_Field = 5;
pub const GxB_Option_Field_GxB_GLOBAL_CHUNK: GxB_Option_Field = 7;
pub const GxB_Option_Field_GxB_BURBLE: GxB_Option_Field = 99;
pub const GxB_Option_Field_GxB_SPARSITY_STATUS: GxB_Option_Field = 33;
pub const GxB_Option_Field_GxB_IS_HYPER: GxB_Option_Field = 6;
pub const GxB_Option_Field_GxB_SPARSITY_CONTROL: GxB_Option_Field = 32;
pub const GxB_Option_Field_GxB_GLOBAL_GPU_CONTROL: GxB_Option_Field = 21;
pub const GxB_Option_Field_GxB_GLOBAL_GPU_CHUNK: GxB_Option_Field = 22;
pub type GxB_Option_Field = ::std::os::raw::c_uint;
pub const GxB_Format_Value_GxB_BY_ROW: GxB_Format_Value = 0;
pub const GxB_Format_Value_GxB_BY_COL: GxB_Format_Value = 1;
pub const GxB_Format_Value_GxB_NO_FORMAT: GxB_Format_Value = -1;
pub type GxB_Format_Value = ::std::os::raw::c_int;
extern "C" {
    pub static GxB_FORMAT_DEFAULT: GxB_Format_Value;
}
extern "C" {
    pub static GxB_HYPER_DEFAULT: f64;
}
extern "C" {
    pub static GxB_ALWAYS_HYPER: f64;
}
extern "C" {
    pub static GxB_NEVER_HYPER: f64;
}
extern "C" {
    pub fn GxB_Matrix_Option_set(A: GrB_Matrix, field: GxB_Option_Field, ...) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_Option_get(A: GrB_Matrix, field: GxB_Option_Field, ...) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Option_set(A: GrB_Vector, field: GxB_Option_Field, ...) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_Option_get(A: GrB_Vector, field: GxB_Option_Field, ...) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_set(field: GxB_Option_Field, ...) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Global_Option_get(field: GxB_Option_Field, ...) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_wait(type_: *mut GrB_Type) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_wait(op: *mut GrB_UnaryOp) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_wait(op: *mut GrB_BinaryOp) -> GrB_Info;
}
extern "C" {
    pub fn GxB_SelectOp_wait(op: *mut GxB_SelectOp) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_wait(monoid: *mut GrB_Monoid) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_wait(semiring: *mut GrB_Semiring) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_wait(desc: *mut GrB_Descriptor) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_wait(s: *mut GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_wait(v: *mut GrB_Vector) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_wait(A: *mut GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Type_error(error: *mut *const ::std::os::raw::c_char, type_: GrB_Type) -> GrB_Info;
}
extern "C" {
    pub fn GrB_UnaryOp_error(
        error: *mut *const ::std::os::raw::c_char,
        op: GrB_UnaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_BinaryOp_error(
        error: *mut *const ::std::os::raw::c_char,
        op: GrB_BinaryOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_SelectOp_error(
        error: *mut *const ::std::os::raw::c_char,
        op: GxB_SelectOp,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Monoid_error(
        error: *mut *const ::std::os::raw::c_char,
        monoid: GrB_Monoid,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Semiring_error(
        error: *mut *const ::std::os::raw::c_char,
        semiring: GrB_Semiring,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_error(error: *mut *const ::std::os::raw::c_char, s: GxB_Scalar) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_error(error: *mut *const ::std::os::raw::c_char, v: GrB_Vector) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_error(error: *mut *const ::std::os::raw::c_char, A: GrB_Matrix) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Descriptor_error(
        error: *mut *const ::std::os::raw::c_char,
        d: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_mxm(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_vxm(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        u: GrB_Vector,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_mxv(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        A: GrB_Matrix,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseMult_Semiring(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseMult_Monoid(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseMult_BinaryOp(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        mult: GrB_BinaryOp,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseMult_Semiring(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseMult_Monoid(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseMult_BinaryOp(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        mult: GrB_BinaryOp,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseAdd_Semiring(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseAdd_Monoid(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_eWiseAdd_BinaryOp(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        add: GrB_BinaryOp,
        u: GrB_Vector,
        v: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseAdd_Semiring(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseAdd_Monoid(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_eWiseAdd_BinaryOp(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        add: GrB_BinaryOp,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub static mut GrB_ALL: *const u64;
}
extern "C" {
    pub fn GrB_Vector_extract(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_extract(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        A: GrB_Matrix,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Col_extract(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        A: GrB_Matrix,
        I: *const GrB_Index,
        ni: GrB_Index,
        j: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        A: GrB_Matrix,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Col_subassign(
        C: GrB_Matrix,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        I: *const GrB_Index,
        ni: GrB_Index,
        j: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Row_subassign(
        C: GrB_Matrix,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        i: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_BOOL(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: bool,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_INT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i8,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_UINT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u8,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_INT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i16,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_UINT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u16,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_INT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i32,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_UINT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u32,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_INT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i64,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_UINT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u64,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_FP32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: f32,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_FP64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: f64,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_FC32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: GxB_FC32_t,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_FC64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: GxB_FC64_t,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_subassign_UDT(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: *mut ::std::os::raw::c_void,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_BOOL(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: bool,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_INT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i8,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_UINT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u8,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_INT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i16,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_UINT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u16,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_INT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i32,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_UINT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u32,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_INT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i64,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_UINT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u64,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_FP32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: f32,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_FP64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: f64,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_FC32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: GxB_FC32_t,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_FC64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: GxB_FC64_t,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_subassign_UDT(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: *mut ::std::os::raw::c_void,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        A: GrB_Matrix,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Col_assign(
        C: GrB_Matrix,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        I: *const GrB_Index,
        ni: GrB_Index,
        j: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Row_assign(
        C: GrB_Matrix,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        u: GrB_Vector,
        i: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_BOOL(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: bool,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_INT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i8,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_UINT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u8,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_INT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i16,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_UINT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u16,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_INT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i32,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_UINT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u32,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_INT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: i64,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_UINT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: u64,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_FP32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: f32,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_FP64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: f64,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_assign_FC32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: GxB_FC32_t,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_assign_FC64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: GxB_FC64_t,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_assign_UDT(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        x: *mut ::std::os::raw::c_void,
        I: *const GrB_Index,
        ni: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_BOOL(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: bool,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_INT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i8,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_UINT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u8,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_INT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i16,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_UINT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u16,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_INT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i32,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_UINT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u32,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_INT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: i64,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_UINT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: u64,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_FP32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: f32,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_FP64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: f64,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_assign_FC32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: GxB_FC32_t,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_assign_FC64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: GxB_FC64_t,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_assign_UDT(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        x: *mut ::std::os::raw::c_void,
        I: *const GrB_Index,
        ni: GrB_Index,
        J: *const GrB_Index,
        nj: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_UnaryOp,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_UnaryOp,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp1st(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GxB_Scalar,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_BOOL(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: bool,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_INT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i8,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_INT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i16,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_INT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i32,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_INT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i64,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_UINT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u8,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_UINT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u16,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_UINT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u32,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_UINT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u64,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_FP32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: f32,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_FP64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: f64,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp1st_FC32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GxB_FC32_t,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp1st_FC64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GxB_FC64_t,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp1st_UDT(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: *const ::std::os::raw::c_void,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp2nd(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: GxB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_BOOL(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_INT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: i8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_INT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: i16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_INT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: i32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_INT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: i64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_UINT8(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: u8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_UINT16(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: u16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_UINT32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: u32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_UINT64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: u64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_FP32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: f32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_FP64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: f64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp2nd_FC32(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: GxB_FC32_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_apply_BinaryOp2nd_FC64(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: GxB_FC64_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_apply_BinaryOp2nd_UDT(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        u: GrB_Vector,
        y: *const ::std::os::raw::c_void,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp1st(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GxB_Scalar,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_BOOL(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: bool,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_INT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i8,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_INT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i16,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_INT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i32,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_INT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: i64,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_UINT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u8,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_UINT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u16,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_UINT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u32,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_UINT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: u64,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_FP32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: f32,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_FP64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: f64,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp1st_FC32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GxB_FC32_t,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp1st_FC64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: GxB_FC64_t,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp1st_UDT(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        x: *const ::std::os::raw::c_void,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp2nd(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: GxB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_BOOL(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_INT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: i8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_INT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: i16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_INT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: i32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_INT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: i64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_UINT8(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: u8,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_UINT16(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: u16,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_UINT32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: u32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_UINT64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: u64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_FP32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: f32,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_FP64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: f64,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp2nd_FC32(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: GxB_FC32_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_apply_BinaryOp2nd_FC64(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: GxB_FC64_t,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_apply_BinaryOp2nd_UDT(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        y: *const ::std::os::raw::c_void,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_select(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GxB_SelectOp,
        u: GrB_Vector,
        Thunk: GxB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_select(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GxB_SelectOp,
        A: GrB_Matrix,
        Thunk: GxB_Scalar,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_Monoid(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_BinaryOp(
        w: GrB_Vector,
        mask: GrB_Vector,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_BOOL(
        c: *mut bool,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_INT8(
        c: *mut i8,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_UINT8(
        c: *mut u8,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_INT16(
        c: *mut i16,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_UINT16(
        c: *mut u16,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_INT32(
        c: *mut i32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_UINT32(
        c: *mut u32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_INT64(
        c: *mut i64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_UINT64(
        c: *mut u64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_FP32(
        c: *mut f32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_FP64(
        c: *mut f64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_reduce_FC32(
        c: *mut GxB_FC32_t,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_reduce_FC64(
        c: *mut GxB_FC64_t,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_reduce_UDT(
        c: *mut ::std::os::raw::c_void,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        u: GrB_Vector,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_BOOL(
        c: *mut bool,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_INT8(
        c: *mut i8,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_UINT8(
        c: *mut u8,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_INT16(
        c: *mut i16,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_UINT16(
        c: *mut u16,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_INT32(
        c: *mut i32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_UINT32(
        c: *mut u32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_INT64(
        c: *mut i64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_UINT64(
        c: *mut u64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_FP32(
        c: *mut f32,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_FP64(
        c: *mut f64,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_reduce_FC32(
        c: *mut GxB_FC32_t,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_reduce_FC64(
        c: *mut GxB_FC64_t,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_reduce_UDT(
        c: *mut ::std::os::raw::c_void,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_transpose(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        A: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_kron(
        C: GrB_Matrix,
        Mask: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_kronecker_BinaryOp(
        C: GrB_Matrix,
        M: GrB_Matrix,
        accum: GrB_BinaryOp,
        op: GrB_BinaryOp,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_kronecker_Monoid(
        C: GrB_Matrix,
        M: GrB_Matrix,
        accum: GrB_BinaryOp,
        monoid: GrB_Monoid,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GrB_Matrix_kronecker_Semiring(
        C: GrB_Matrix,
        M: GrB_Matrix,
        accum: GrB_BinaryOp,
        semiring: GrB_Semiring,
        A: GrB_Matrix,
        B: GrB_Matrix,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub static mut GxB_MIN_INT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_INT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_INT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_INT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_FP32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_FP64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_INT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_INT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_INT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_INT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_UINT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_UINT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_UINT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_UINT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_FP32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MIN_MONOID_FP64: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_INT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_INT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_INT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_INT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_FP32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MAX_FP64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_INT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_INT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_INT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_INT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_UINT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_UINT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_UINT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_UINT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_FP32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_MAX_MONOID_FP64: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_INT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_INT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_INT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_INT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_FP32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_FP64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_INT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_INT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_INT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_INT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_UINT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_UINT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_UINT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_UINT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_FP32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_PLUS_MONOID_FP64: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_FC32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_PLUS_FC64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_INT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_INT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_INT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_INT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_FP32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_FP64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_INT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_INT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_INT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_INT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_UINT8: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_UINT16: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_UINT32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_UINT64: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_FP32: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_TIMES_MONOID_FP64: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_FC32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_TIMES_FC64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_INT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_INT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_INT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_INT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_FP32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_FP64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_FC32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_ANY_FC64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_LOR_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_LAND_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_LXOR_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_LXNOR_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_EQ_BOOL_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_LOR_MONOID_BOOL: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_LAND_MONOID_BOOL: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_LXOR_MONOID_BOOL: GrB_Monoid;
}
extern "C" {
    pub static mut GrB_LXNOR_MONOID_BOOL: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BOR_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BOR_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BOR_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BOR_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BAND_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BAND_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BAND_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BAND_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXOR_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXOR_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXOR_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXOR_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXNOR_UINT8_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXNOR_UINT16_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXNOR_UINT32_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_BXNOR_UINT64_MONOID: GrB_Monoid;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRST_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRST_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECOND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECOND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PAIR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PAIR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MIN_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MIN_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MIN_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MIN_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MIN_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MAX_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MAX_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MAX_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MAX_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MAX_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_PLUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_PLUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_MINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_MINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_TIMES_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_TIMES_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_DIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_DIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RDIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RDIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_RMINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_RMINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISEQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISEQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISEQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISEQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISEQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISNE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISNE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISNE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISNE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISNE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISGE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISGE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISGE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISGE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISGE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_ISLE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_ISLE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_ISLE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_ISLE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_ISLE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LAND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LAND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LAND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LAND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_LXOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_LXOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_LXOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_LXOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_NE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_NE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_NE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_NE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_NE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_FIRST_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_FIRST_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_FIRST_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_FIRST_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_SECOND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_SECOND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_SECOND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_SECOND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_PAIR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_PAIR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_PAIR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_PAIR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LAND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LAND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LAND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LAND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LAND_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LXOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LXOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LXOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LXOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LXOR_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_EQ_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_EQ_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_EQ_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_EQ_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_EQ_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LT_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_GE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_GE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_GE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_GE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_GE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LOR_LE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LAND_LE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_LXOR_LE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_EQ_LE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_LE_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRST_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRST_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRST_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECOND_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECOND_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECOND_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PAIR_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PAIR_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PAIR_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_PLUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_PLUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_PLUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_MINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_MINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_MINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_TIMES_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_TIMES_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_TIMES_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_DIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_DIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_DIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RDIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RDIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RDIV_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_FC32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_RMINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_RMINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_RMINUS_FC64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXNOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXNOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXNOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BOR_BXNOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXNOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXNOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXNOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BAND_BXNOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXNOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXNOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXNOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXOR_BXNOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BAND_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BAND_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BAND_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BAND_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXNOR_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXNOR_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXNOR_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_BXNOR_BXNOR_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_FIRSTJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_FIRSTJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_FIRSTJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_FIRSTJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_FIRSTJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDI_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDI_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDI1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDI1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDJ_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDJ_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MIN_SECONDJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_MAX_SECONDJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_ANY_SECONDJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_PLUS_SECONDJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDJ1_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GxB_TIMES_SECONDJ1_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_TIMES_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_PLUS_MIN_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_PLUS_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_TIMES_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_FIRST_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_SECOND_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MIN_MAX_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_PLUS_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_TIMES_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_FIRST_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_SECOND_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_INT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_INT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_INT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_INT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_UINT8: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_UINT16: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_UINT32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_UINT64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_FP32: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_MAX_MIN_SEMIRING_FP64: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_LOR_LAND_SEMIRING_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_LAND_LOR_SEMIRING_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_LXOR_LAND_SEMIRING_BOOL: GrB_Semiring;
}
extern "C" {
    pub static mut GrB_LXNOR_LOR_SEMIRING_BOOL: GrB_Semiring;
}
extern "C" {
    pub fn GrB_Matrix_resize(C: GrB_Matrix, nrows_new: GrB_Index, ncols_new: GrB_Index)
        -> GrB_Info;
}
extern "C" {
    pub fn GrB_Vector_resize(w: GrB_Vector, nrows_new: GrB_Index) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_resize(C: GrB_Matrix, nrows_new: GrB_Index, ncols_new: GrB_Index)
        -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_resize(w: GrB_Vector, nrows_new: GrB_Index) -> GrB_Info;
}
pub const GxB_Print_Level_GxB_SILENT: GxB_Print_Level = 0;
pub const GxB_Print_Level_GxB_SUMMARY: GxB_Print_Level = 1;
pub const GxB_Print_Level_GxB_SHORT: GxB_Print_Level = 2;
pub const GxB_Print_Level_GxB_COMPLETE: GxB_Print_Level = 3;
pub const GxB_Print_Level_GxB_SHORT_VERBOSE: GxB_Print_Level = 4;
pub const GxB_Print_Level_GxB_COMPLETE_VERBOSE: GxB_Print_Level = 5;
pub type GxB_Print_Level = ::std::os::raw::c_uint;
extern "C" {
    pub fn GxB_Type_fprint(
        type_: GrB_Type,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_UnaryOp_fprint(
        unaryop: GrB_UnaryOp,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_BinaryOp_fprint(
        binaryop: GrB_BinaryOp,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_SelectOp_fprint(
        selectop: GxB_SelectOp,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Monoid_fprint(
        monoid: GrB_Monoid,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Semiring_fprint(
        semiring: GrB_Semiring,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Descriptor_fprint(
        descriptor: GrB_Descriptor,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_fprint(
        A: GrB_Matrix,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_fprint(
        v: GrB_Vector,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Scalar_fprint(
        s: GxB_Scalar,
        name: *const ::std::os::raw::c_char,
        pr: GxB_Print_Level,
        f: *mut FILE,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_CSR(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Aj_size: GrB_Index,
        Ax_size: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_CSC(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Ai_size: GrB_Index,
        Ax_size: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_HyperCSR(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Ah_size: GrB_Index,
        Aj_size: GrB_Index,
        Ax_size: GrB_Index,
        nvec: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_HyperCSC(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: GrB_Index,
        Ah_size: GrB_Index,
        Ai_size: GrB_Index,
        Ax_size: GrB_Index,
        nvec: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_BitmapR(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: GrB_Index,
        Ax_size: GrB_Index,
        nvals: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_BitmapC(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: GrB_Index,
        Ax_size: GrB_Index,
        nvals: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_FullR(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_import_FullC(
        A: *mut GrB_Matrix,
        type_: GrB_Type,
        nrows: GrB_Index,
        ncols: GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_import_CSC(
        v: *mut GrB_Vector,
        type_: GrB_Type,
        n: GrB_Index,
        vi: *mut *mut GrB_Index,
        vx: *mut *mut ::std::os::raw::c_void,
        vi_size: GrB_Index,
        vx_size: GrB_Index,
        nvals: GrB_Index,
        jumbled: bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_import_Bitmap(
        v: *mut GrB_Vector,
        type_: GrB_Type,
        n: GrB_Index,
        vb: *mut *mut i8,
        vx: *mut *mut ::std::os::raw::c_void,
        vb_size: GrB_Index,
        vx_size: GrB_Index,
        nvals: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_import_Full(
        v: *mut GrB_Vector,
        type_: GrB_Type,
        n: GrB_Index,
        vx: *mut *mut ::std::os::raw::c_void,
        vx_size: GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_CSR(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ap: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Aj_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_CSC(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Ai_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_HyperCSR(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Aj: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Ah_size: *mut GrB_Index,
        Aj_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        nvec: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_HyperCSC(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ap: *mut *mut GrB_Index,
        Ah: *mut *mut GrB_Index,
        Ai: *mut *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ap_size: *mut GrB_Index,
        Ah_size: *mut GrB_Index,
        Ai_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        nvec: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_BitmapR(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        nvals: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_BitmapC(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ab: *mut *mut i8,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ab_size: *mut GrB_Index,
        Ax_size: *mut GrB_Index,
        nvals: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_FullR(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Matrix_export_FullC(
        A: *mut GrB_Matrix,
        type_: *mut GrB_Type,
        nrows: *mut GrB_Index,
        ncols: *mut GrB_Index,
        Ax: *mut *mut ::std::os::raw::c_void,
        Ax_size: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_export_CSC(
        v: *mut GrB_Vector,
        type_: *mut GrB_Type,
        n: *mut GrB_Index,
        vi: *mut *mut GrB_Index,
        vx: *mut *mut ::std::os::raw::c_void,
        vi_size: *mut GrB_Index,
        vx_size: *mut GrB_Index,
        nvals: *mut GrB_Index,
        jumbled: *mut bool,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_export_Bitmap(
        v: *mut GrB_Vector,
        type_: *mut GrB_Type,
        n: *mut GrB_Index,
        vb: *mut *mut i8,
        vx: *mut *mut ::std::os::raw::c_void,
        vb_size: *mut GrB_Index,
        vx_size: *mut GrB_Index,
        nvals: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_Vector_export_Full(
        v: *mut GrB_Vector,
        type_: *mut GrB_Type,
        n: *mut GrB_Index,
        vx: *mut *mut ::std::os::raw::c_void,
        vx_size: *mut GrB_Index,
        desc: GrB_Descriptor,
    ) -> GrB_Info;
}
extern "C" {
    pub fn GxB_cuda_malloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GxB_cuda_calloc(n: size_t, size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GxB_cuda_free(p: *mut ::std::os::raw::c_void);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
